//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using SchoolManager.Models;
using SchoolManager.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using SchoolManager.DAL;
using SchoolManager.BLL;
using Unity.Attributes;

namespace SchoolManager.BLL
{
	public class Virtual_YZJ_CheckRecordBLL
	{

        public YZJ_CheckRecordRepository m_Rep =new YZJ_CheckRecordRepository(new DbContainer());

		public virtual List<YZJ_CheckRecordModel> GetList( string queryStr)
        {

            IQueryable<YZJ_CheckRecord> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
								a=>(a.id!=null && a.id.Contains(queryStr))
								
								|| (a.StdId!=null && a.StdId.Contains(queryStr))
								|| (a.StdName!=null && a.StdName.Contains(queryStr))
								|| (a.ApplicantNo!=null && a.ApplicantNo.Contains(queryStr))
								|| (a.ApplicantName!=null && a.ApplicantName.Contains(queryStr))
								|| (a.ApplyDate!=null && a.ApplyDate.Contains(queryStr))
								|| (a.AssessorId!=null && a.AssessorId.Contains(queryStr))
								|| (a.AssessorName!=null && a.AssessorName.Contains(queryStr))
								|| (a.AssessDate!=null && a.AssessDate.Contains(queryStr))
								
								|| (a.ExaminantName!=null && a.ExaminantName.Contains(queryStr))
								|| (a.ExamineName!=null && a.ExamineName.Contains(queryStr))
								|| (a.ExamineDate!=null && a.ExamineDate.Contains(queryStr))
								|| (a.AssessResult!=null && a.AssessResult.Contains(queryStr))
								|| (a.AssessState!=null && a.AssessState.Contains(queryStr))
								|| (a.ApplyReason!=null && a.ApplyReason.Contains(queryStr))
								|| (a.ExamineOpinion!=null && a.ExamineOpinion.Contains(queryStr))
								|| (a.ApplyType!=null && a.ApplyType.Contains(queryStr))
								);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            return CreateModelList(ref queryData);
        }

        public virtual List<YZJ_CheckRecordModel> CreateModelList(ref IQueryable<YZJ_CheckRecord> queryData)
        {

            List<YZJ_CheckRecordModel> modelList = (from r in queryData
                                              select new YZJ_CheckRecordModel
                                              {
													id = r.id,
													available = r.available,
													StdId = r.StdId,
													StdName = r.StdName,
													ApplicantNo = r.ApplicantNo,
													ApplicantName = r.ApplicantName,
													ApplyDate = r.ApplyDate,
													AssessorId = r.AssessorId,
													AssessorName = r.AssessorName,
													AssessDate = r.AssessDate,
													ExaminantId = r.ExaminantId,
													ExaminantName = r.ExaminantName,
													ExamineName = r.ExamineName,
													ExamineDate = r.ExamineDate,
													AssessResult = r.AssessResult,
													AssessState = r.AssessState,
													ApplyReason = r.ApplyReason,
													ExamineOpinion = r.ExamineOpinion,
													ApplyType = r.ApplyType,
          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(YZJ_CheckRecordModel model)
        {
            try
            {
                YZJ_CheckRecord entity = m_Rep.GetById(model.id);
                if (entity != null)
                {
                    return false;
                }
                entity = new YZJ_CheckRecord();
               				entity.id = model.id;
				entity.available = model.available;
				entity.StdId = model.StdId;
				entity.StdName = model.StdName;
				entity.ApplicantNo = model.ApplicantNo;
				entity.ApplicantName = model.ApplicantName;
				entity.ApplyDate = model.ApplyDate;
				entity.AssessorId = model.AssessorId;
				entity.AssessorName = model.AssessorName;
				entity.AssessDate = model.AssessDate;
				entity.ExaminantId = model.ExaminantId;
				entity.ExaminantName = model.ExaminantName;
				entity.ExamineName = model.ExamineName;
				entity.ExamineDate = model.ExamineDate;
				entity.AssessResult = model.AssessResult;
				entity.AssessState = model.AssessState;
				entity.ApplyReason = model.ApplyReason;
				entity.ExamineOpinion = model.ExamineOpinion;
				entity.ApplyType = model.ApplyType;
  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {

                return false;
            }
        }



         public virtual bool Delete( string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {

                return false;
            }
        }

        public virtual bool Delete( string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {

                return false;
            }
        }

		
       

        public virtual bool Edit( YZJ_CheckRecordModel model)
        {
            try
            {
                YZJ_CheckRecord entity = m_Rep.GetById(model.id);
                if (entity == null)
                {
                    return false;
                }
                              				entity.id = model.id;
				entity.available = model.available;
				entity.StdId = model.StdId;
				entity.StdName = model.StdName;
				entity.ApplicantNo = model.ApplicantNo;
				entity.ApplicantName = model.ApplicantName;
				entity.ApplyDate = model.ApplyDate;
				entity.AssessorId = model.AssessorId;
				entity.AssessorName = model.AssessorName;
				entity.AssessDate = model.AssessDate;
				entity.ExaminantId = model.ExaminantId;
				entity.ExaminantName = model.ExaminantName;
				entity.ExamineName = model.ExamineName;
				entity.ExamineDate = model.ExamineDate;
				entity.AssessResult = model.AssessResult;
				entity.AssessState = model.AssessState;
				entity.ApplyReason = model.ApplyReason;
				entity.ExamineOpinion = model.ExamineOpinion;
				entity.ApplyType = model.ApplyType;
 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    return false;
                }

            }
            catch (Exception ex)
            {                

                return false;
            }
        }

      

        public virtual YZJ_CheckRecordModel GetById(string id)
        {
            if (IsExists(id))
            {
                YZJ_CheckRecord entity = m_Rep.GetById(id);
                YZJ_CheckRecordModel model = new YZJ_CheckRecordModel();
                              				model.id = entity.id;
				model.available = entity.available;
				model.StdId = entity.StdId;
				model.StdName = entity.StdName;
				model.ApplicantNo = entity.ApplicantNo;
				model.ApplicantName = entity.ApplicantName;
				model.ApplyDate = entity.ApplyDate;
				model.AssessorId = entity.AssessorId;
				model.AssessorName = entity.AssessorName;
				model.AssessDate = entity.AssessDate;
				model.ExaminantId = entity.ExaminantId;
				model.ExaminantName = entity.ExaminantName;
				model.ExamineName = entity.ExamineName;
				model.ExamineDate = entity.ExamineDate;
				model.AssessResult = entity.AssessResult;
				model.AssessState = entity.AssessState;
				model.ApplyReason = entity.ApplyReason;
				model.ExamineOpinion = entity.ExamineOpinion;
				model.ApplyType = entity.ApplyType;
 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}
}
