<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../../SchoolManager.Models/Common.ttinclude"#>
<#@ 
 output extension=".cs"#><#

const string inputFile = @"../../SchoolManager.Models/Db.edmx";
var textTransform = DynamicTextTransformation.Create(this); 
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this); 
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);   
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);    
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    if(!entity.Name.StartsWith("V_"))
        {
            fileManager.StartNewFile("Virtual_"+entity.Name + "BLL.cs");
			var simpleProperties = typeMapper.GetSimpleProperties(entity);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using SchoolManager.Models;
using SchoolManager.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using SchoolManager.DAL;
using SchoolManager.BLL;
using Unity.Attributes;

namespace SchoolManager.BLL
{
	public class Virtual_<#=entity.Name.Replace("tbl_","") #>BLL
	{

        public <#=entity.Name.Replace("tbl_","") #>Repository m_Rep =new <#=entity.Name.Replace("tbl_","") #>Repository(new DbContainer());

		public virtual List<<#=entity.Name.Replace("tbl_","") #>Model> GetList( string queryStr)
        {

            IQueryable<<#=entity.Name #>> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(
				<#
				int i =0;
				if (simpleProperties.Any()){foreach(var edmProperty in simpleProperties){ 
				if(i==0)
				{

				#>
				<#=codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0?"a=>(a."+edmProperty+"!=null && a."+edmProperty+".Contains(queryStr))":""#>
				<#
				if(codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0)
				{
				i=1;
				}
				}
				else if(i==1)
				{#>
				<#=codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0?"|| (a."+edmProperty+"!=null && a."+edmProperty+".Contains(queryStr))":""#>
				<#
				}
				
				#>
<#}

}#>
				);
            }
            else
            {
                queryData = m_Rep.GetList();
            }
            return CreateModelList(ref queryData);
        }

        public virtual List<<#=entity.Name.Replace("tbl_","") #>Model> CreateModelList(ref IQueryable<<#=entity.Name #>> queryData)
        {

            List<<#=entity.Name.Replace("tbl_","") #>Model> modelList = (from r in queryData
                                              select new <#=entity.Name.Replace("tbl_","") #>Model
                                              {
<#
if (simpleProperties.Any())
{
foreach(var edmProperty in simpleProperties)
{
#>
													<#=edmProperty#> = r.<#=edmProperty#>,
<#
}
}
#>          
                                              }).ToList();

            return modelList;
        }

        public virtual bool Create(ref ValidationErrors errors, <#=entity.Name.Replace("tbl_","") #>Model model)
        {
            try
            {
                <#=entity.Name #> entity = m_Rep.GetById(model.<#int j =0;if (simpleProperties.Any()){foreach(var edmProperty in simpleProperties){if(j==0){#><#=edmProperty#><#j=1;}}}#>);
                if (entity != null)
                {
                    errors.Add(Suggestion.PrimaryRepeat);
                    return false;
                }
                entity = new <#=entity.Name #>();
               <#

if (simpleProperties.Any())
{
foreach(var edmProperty in simpleProperties)
{
#>
				entity.<#=edmProperty#> = model.<#=edmProperty#>;
<#
}
}
#>  

                if (m_Rep.Create(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Suggestion.InsertFail);
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHandler.WriteException(ex);
                return false;
            }
        }



         public virtual bool Delete(ref ValidationErrors errors, string id)
        {
            try
            {
                if (m_Rep.Delete(id) == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHandler.WriteException(ex);
                return false;
            }
        }

        public virtual bool Delete(ref ValidationErrors errors, string[] deleteCollection)
        {
            try
            {
                if (deleteCollection != null)
                {
                    using (TransactionScope transactionScope = new TransactionScope())
                    {
                        if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
                        {
                            transactionScope.Complete();
                            return true;
                        }
                        else
                        {
                            Transaction.Current.Rollback();
                            return false;
                        }
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHandler.WriteException(ex);
                return false;
            }
        }

		
       

        public virtual bool Edit(ref ValidationErrors errors, <#=entity.Name.Replace("tbl_","") #>Model model)
        {
            try
            {
                <#=entity.Name #> entity = m_Rep.GetById(model.<#int n =0;if (simpleProperties.Any()){foreach(var edmProperty in simpleProperties){if(n==0){#><#=edmProperty#><#n=1;}}}#>);
                if (entity == null)
                {
                    errors.Add(Suggestion.Disable);
                    return false;
                }
                              <#
if (simpleProperties.Any())
{
foreach(var edmProperty in simpleProperties)
{
#>
				entity.<#=edmProperty#> = model.<#=edmProperty#>;
<#
}
}
#> 


                if (m_Rep.Edit(entity))
                {
                    return true;
                }
                else
                {
                    errors.Add(Suggestion.EditFail);
                    return false;
                }

            }
            catch (Exception ex)
            {
                errors.Add(ex.Message);
                ExceptionHandler.WriteException(ex);
                return false;
            }
        }

      

        public virtual <#=entity.Name.Replace("tbl_","") #>Model GetById(string id)
        {
            if (IsExists(id))
            {
                <#=entity.Name #> entity = m_Rep.GetById(id);
                <#=entity.Name.Replace("tbl_","") #>Model model = new <#=entity.Name.Replace("tbl_","") #>Model();
                              <#
if (simpleProperties.Any())
{
foreach(var edmProperty in simpleProperties)
{
#>
				model.<#=edmProperty#> = entity.<#=edmProperty#>;
<#
}
}
#> 
                return model;
            }
            else
            {
                return null;
            }
        }

        public virtual bool IsExists(string id)
        {
            return m_Rep.IsExist(id);
        }
		  public void Dispose()
        { 
            
        }

	}
<#
            EndNamespace(code);
		}
}

fileManager.Process();

#>
